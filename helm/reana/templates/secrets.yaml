---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-cern-sso-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  CERN_CONSUMER_KEY: {{ .Values.secrets.cern.sso.CERN_CONSUMER_KEY | default "cern_consumer_key" | b64enc }}
  CERN_CONSUMER_SECRET: {{ .Values.secrets.cern.sso.CERN_CONSUMER_SECRET | default "cern_consumer_secret" | b64enc }}
---
{{- if .Values.login }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-login-provider-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  PROVIDER_SECRETS: {{ .Values.secrets.login | toJson | b64enc }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-cern-gitlab-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  REANA_GITLAB_OAUTH_APP_ID: {{ .Values.secrets.gitlab.REANA_GITLAB_OAUTH_APP_ID | default "reana_gitlab_oauth_app_id" | b64enc }}
  REANA_GITLAB_OAUTH_APP_SECRET: {{ .Values.secrets.gitlab.REANA_GITLAB_OAUTH_APP_SECRET | default "reana_gitlab_oauth_app_secret" | b64enc }}
  REANA_GITLAB_HOST: {{ .Values.secrets.gitlab.REANA_GITLAB_HOST | default "gitlab.cern.ch" | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  REANA_SECRET_KEY: {{ .Values.secrets.reana.REANA_SECRET_KEY | default "secret_key" | b64enc }}
{{- if .Values.notifications.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-mail-notification-sender-password
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  REANA_EMAIL_LOGIN: {{ .Values.notifications.email_config.login | default "" | b64enc | quote }}
  REANA_EMAIL_PASSWORD: {{ .Values.notifications.email_config.password | default "" | b64enc | quote }}
{{- end }}
---
{{- if and .Values.ingress.enabled .Values.ingress.tls.self_signed_cert }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-tls-secret
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: kubernetes.io/tls
data:
  {{- $cert := genSelfSignedCert (.Values.reana_hostname | default "localhost") nil nil 90 }}
  tls.crt: {{ $cert.Cert | b64enc | quote }}
  tls.key: {{ $cert.Key | b64enc | quote }}
{{- end }}
---
{{- if and .Values.opensearch.enabled .Values.opensearch.tls.generate }}
{{- $prefix := include "reana.prefix" . }}
{{- $tlsSecretName := printf "%s-%s" $prefix "opensearch-tls-secrets" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $tlsSecretName }}
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/tls
data:
  {{- $idx := lookup "v1" "Secret" .Release.Namespace $tlsSecretName -}}
  {{- if $idx }}
  tls.crt: {{ index $idx.data "tls.crt" }}
  tls.key: {{ index $idx.data "tls.key" }}
  admin.crt: {{ index $idx.data "admin.crt" }}
  admin.key: {{ index $idx.data "admin.key" }}
  ca.crt: {{ index $idx.data "ca.crt" }}
  {{ else }}
  {{- $ca := genCA .Values.opensearch.tls.ca.cn (.Values.opensearch.tls.ca.ttl | int) }}
  {{- $cert := genSignedCert .Values.opensearch.tls.cert.cn nil (list .Values.opensearch.tls.cert.cn) (.Values.opensearch.tls.cert.ttl | int) $ca }}
  {{- $certAdmin := genSignedCert .Values.opensearch.tls.admin.cn nil (list .Values.opensearch.tls.cert.cn) (.Values.opensearch.tls.admin.ttl | int) $ca }}
  tls.crt: {{ $cert.Cert | b64enc | quote }}
  tls.key: {{ $cert.Key | b64enc | quote }}
  admin.crt: {{ $certAdmin.Cert | b64enc | quote }}
  admin.key: {{ $certAdmin.Key | b64enc | quote }}
  ca.crt: {{ $ca.Cert | b64enc | quote }}
  {{- end }}
{{- end }}
---
{{- if and .Values.opensearch.enabled .Values.opensearch.customSecurityConfig }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-opensearch-config-secrets
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/opaque
stringData:
  {{- if .Values.opensearch.customSecurityConfig.internalUsers }}
  internal_users.yml: |
    ---
    # This is the internal user database
    # The hash value is a bcrypt hash and can be generated with plugin/tools/hash.sh
    _meta:
      type: "internalusers"
      config_version: 2
    {{ .Values.opensearch.customSecurityConfig.internalUsers | toYaml | nindent 4 }}
  {{- end }}
  {{- if .Values.opensearch.customSecurityConfig.rolesMapping }}
  roles_mapping.yml: |
    ---
    # In this file users, backendroles and hosts can be mapped to Security roles.
    # Permissions for OpenSearch roles are configured in roles.yml
    _meta:
      type: "rolesmapping"
      config_version: 2
    {{ .Values.opensearch.customSecurityConfig.rolesMapping | toYaml | nindent 4 }}
  {{- end }}
  {{- if .Values.opensearch.customSecurityConfig.roles }}
  roles.yml: |
    ---
    _meta:
      type: "roles"
      config_version: 2
    # The security REST API access role is used to assign specific users access to change the security settings through the REST API.
    security_rest_api_access:
      reserved: true
    {{ .Values.opensearch.customSecurityConfig.roles | toYaml | nindent 4 }}
  {{- end }}
{{- end }}
---
{{- if .Values.opensearch.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "reana.prefix" . }}-opensearch-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
data:
  REANA_OPENSEARCH_PASSWORD: {{ .Values.components.reana_workflow_controller.environment.REANA_OPENSEARCH_PASSWORD | default "reana" | b64enc }}
  {{- if not .Values.opensearch.securityConfig.enabled }}
  OPENSEARCH_INITIAL_ADMIN_PASSWORD: {{ .Values.opensearch.initialAdminPassword | default "reana" | b64enc }} # dev environment only
  {{- end }}
{{- end }}
